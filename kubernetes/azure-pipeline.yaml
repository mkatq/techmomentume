trigger:
  branches:
    include:
      - main                           # <- select branch

  paths:
    include:
    -  kubernetes/**

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: AzureCLI@2
  displayName: 'Get AKS credentials and deploy manifests'
  inputs:
    azureSubscription: 'AzureServiceConnection'  # Replace with your service connection name
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Getting AKS credentials..."
      az aks get-credentials --resource-group Devops1-week12-Techmomentum-RG --name Devops1-week12-Techmomentum-aks-cluster --overwrite-existing

            echo "Getting AKS credentials..."
      az aks get-credentials --resource-group Devops1-week12-Techmomentum-RG --name Devops1-week12-Techmomentum-aks-cluster --overwrite-existing
      
      curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
      sudo apt-get install apt-transport-https --yes
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
      sudo apt-get update
      sudo apt-get install helm

      helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      helm repo update

      helm install nginx-ingress ingress-nginx/ingress-nginx \
        --namespace ingress-nginx \
        --create-namespace \
        --set controller.ingressClassResource.name=nginx \
        --set controller.ingressClassResource.controllerValue=k8s.io/ingress-nginx \
        --set controller.service.type=LoadBalancer

      # üîÅ Wait for the LoadBalancer external IP to be assigned
      echo "Waiting for Ingress External IP..."
      INGRESS_IP=""
      for i in {1..30}; do
        INGRESS_IP=$(kubectl get svc nginx-ingress-ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [[ -n "$INGRESS_IP" ]]; then
          echo "Found Ingress IP: $INGRESS_IP"
          break
        fi
        echo "Ingress IP not assigned yet. Waiting 10 seconds..."
        sleep 10
      done

      if [[ -z "$INGRESS_IP" ]]; then
        echo "‚ùå ERROR: Ingress external IP was not assigned in time."
        exit 1
      fi

      # üîÑ Inject Ingress IP into the ConfigMap file
      echo "Injecting Ingress IP into frontend-configmap.yml..."
      sed -i "s|http://REPLACE_ME/backend|http://$INGRESS_IP/backend|g" ./config_map.yml


      bash ./deploy.sh

      
      kubectl get svc -n ingress-nginx
      kubectl get service -n monitoring

    workingDirectory: kubernetes  
